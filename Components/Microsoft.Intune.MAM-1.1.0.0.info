{"Name":"Microsoft Intune MAM","Id":3151,"Alias":"Microsoft.Intune.MAM","Description":"\r\nThe Intune App SDK Xamarin component enables mobile app management features with Microsoft Intune mobile iOS and Android apps built with Xamarin. The component allows a developer to easily build in data protection features into their app. You will find that you can enable most of the SDK features without changing your app’s behavior. There are few APIs provided for your app to provide better customization into the user experience, however, these APIs are optional and aren\u0027t required to get your mobile app enabled for management. Once you’ve enabled your app, IT administrators can deploy policies to Intune managed apps and take advantage of these features to protect their corporate data.\r\n\r\nOnce you\u0027ve built the component into your mobile app, the IT admin will be able to deploy policy via Microsoft Intune supporting a variety of features. Below we\u0027ve listed all the features your app can support without any additional app changes.\r\n\r\n\r\n##Control users’ ability to move corporate documents\r\n\r\nIT administrators can control file relocation of corporate documents in Intune managed apps. For instance, they can deploy a policy that disables file backup apps from backing up corporate data to the cloud.\r\n\r\n##Configure clipboard restrictions\r\n\r\nIT administrators can configure the clipboard behavior in Intune managed apps. For instance, they can deploy a policy so that end users are unable to use the clipboard to cut/copy from an Intune managed app and paste into a non-managed app.\r\n\r\n##Configure screen capture restrictions\r\n\r\nIT administrators can prevent users from capturing the screen if an Intune-managed app is displayed. Applying this restriction prevents the capture and release of confidential corporate content. This feature is only available for Android devices.\r\n\r\n##Enforce encryption on saved data\r\n\r\nIT administrators can enforce a policy that ensures that data saved to the device by the app is encrypted.\r\n\r\n##Remotely wipe corporate data\r\n\r\nIT administrators can remotely wipe corporate data from an Intune-managed app when the device is unenrolled from Microsoft Intune. This feature is identity-based and will delete only the files that relate to the corporate identity of the end user. To do that, the feature requires the app’s participation. The app can specify the identity for which the wipe should occur based on user settings. In the absence of these specified user settings from the app, the default behavior is to wipe the application directory and notify the end user that company resource access has been removed.\r\n\r\n##Enforce the use of a Managed Browser\r\n\r\nIT administrators can enforce the use of a Managed Browser when opening links from within Intune-managed apps. Using the Microsoft Intune Managed Browser helps to ensure that links that appear in emails (which are in an Intune-managed mail client) are kept within the domain of Intune managed apps.\r\n\r\n##Enforce a PIN policy\r\n\r\nIT administrators can enforce a PIN policy when an Intune-managed app is started. This policy helps to ensure that the end users who enrolled their devices with Microsoft Intune are the same individuals who are starting the apps. When end users configure their PIN, Intune App SDK uses Azure Active Directory to verify the credentials of end users against the device enrollment credentials.\r\n\r\n##Require users to enter credentials before they can start apps\r\n\r\nIT administrators can require users to enter their credentials before users can start an Intune-managed app. Intune App SDK uses Azure Active Directory to provide a single sign-on experience, where the credentials, once entered, are reused for subsequent logins. We also support authentication of identity management solutions federated with Azure Active Directory.\r\n\r\n##Check device health and compliance\r\n\r\nIT administrators can a check the health of the device and its compliance with corporate policies before end users access Intune-managed apps. On the iOS platform, this policy checks if the device has been jailbroken. On the Android platform, this policy checks if the device has been rooted.\r\n\r\n##Enforce encryption on saved data\r\nIT administrators can enforce a policy that ensures that data saved to the device by the app is encrypted.\r\n","Version":"1.1.0.0","Summary":"Enable app management of iOS and Android mobile apps with Microsoft Intune","QuickStart":"## Using Intune App SDK in beta\r\n\r\nOnce released, the Intune App SDK will be accessible directly from the Xamarin component store. While in beta, developers will be able to add the component locally through the following steps:\r\n\r\n1.\tDownload Xamarin-component.exe from [here](https://components.xamarin.com/submit/xpkg) and extract it.\r\n\r\n2.\tDownload the Intune App SDK Xamarin component folder and extract it. Both files downloaded from step 1 and step 2 should be in the same directory level.\r\n\r\n3.\tIn the command line as an admin, run Xamain.Component.exe install \u003c.xam\u003e file.\r\n  \r\n4.\tIn Visual Studio, right click `components` in your previously created Xamarin project.\r\n\r\n5.\tSelect `Edit Components` and add the Intune App SDK component you’ve downloaded locally to your computer.\r\n\r\nNote:  Once released, you will be able to add the component directly from the component store in Visual Studio.\r\nYou can now begin building the component into your iOS and Android Xamarin apps.\r\n\r\n## Enabling MAM in your iOS mobile app\r\n1.\tIn order to initialize the Intune App SDK, you will need to make a call for any API in AppDelegate.cs class e.g.\r\n      ```C#\r\n      public override bool FinishedLaunching (UIApplication application, NSDictionary launchOptions)\r\n      {\r\n            Console.WriteLine (\"Is Managed: {0}\", IntuneMAMPolicyManager.Instance.PrimaryUser != null);\r\n            return true;\r\n      }\r\n      ```\r\n2.\tNow that the component is added an initialized, you can follow the general steps required for building the App SDK into an iOS mobile app. You can find the full documentation for enabling native iOS apps [here](https://msdn.microsoft.com/en-us/library/mt627812.aspx). For the purpose of your iOS Xamarin app, follow steps 5 through 9 from the Intune App SDK for iOS guide.\r\nNote: There are several modifications specific to Xamarin iOS apps. For instance, in step 7, when enabling keychain groups, you will need to add the following to include the Xamarin sample app we included in the component. Below is an example of the groups you would need to have in your Keychain Access groups:\r\n      ```xml\r\n      \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\r\n      \u003c!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\u003e\r\n      \u003cplist version=\"1.0\"\u003e\r\n            \u003cdict\u003e\r\n                  \u003ckey\u003ekeychain-access-groups\u003c/key\u003e\r\n                  \u003carray\u003e\r\n                        \u003cstring\u003e$(AppIdentifierPrefix)com.xamarin.microsoftintunesample\u003c/string\u003e\r\n                        \u003cstring\u003e$(AppIdentifierPrefix)com.xamarin.microsoftintunesample.intunemam\u003c/string\u003e\r\n                        \u003cstring\u003e$(AppIdentifierPrefix)com.microsoft.intune.mam\u003c/string\u003e\r\n                        \u003cstring\u003e$(AppIdentifierPrefix)com.microsoft.adalcache\u003c/string\u003e\r\n                  \u003c/array\u003e\r\n            \u003c/dict\u003e\r\n      \u003c/plist\u003e\r\n      ```\r\n\r\nYou have completed the steps necessary to build the component into your iOS Xamarin app. You can now follow additional steps included in the sample we’ve included in IntuneMAMSample, you should be able to begin testing your iOS mobile app. If you are utilizing Xcode for building your project, you can use the Intune App SDK Settings.bundle. This will allow you to toggle Intune policy settings on and off as you build your project to diagnose and debug issues. To take advantage of this bundle, follow the steps in the iOS guide under Debugging the Intune App SDK in Xcode.\r\n\r\n## Enabling MAM in your Android mobile app\r\nFor Xamarin apps not using a UI framework, you will need to follow the steps the Intune App SDK for Android. For the purposes of your Xamarin Android app, you will need to replace class, methods, and activities with their MAM equivalent based on the table included in the guide. If your app doesn’t define an android.app.Application class, you will need to create one and ensure that you inherit from MAMApplication. In addition, you must add `\u003cAndroidApplicationJavaClass\u003ecom.microsoft.intune.mam.client.app.MAMApplication\u003c/AndroidApplicationJavaClass\u003e` to any `\u003cPropertyGroup\u003e` in your csproj.\r\n\r\nFor Xamarin Forms and other UI frameworks, we have provided a tool called MAM.Remapper. The tool will accomplish the class replacement for you. However, you will need to do the following steps:\r\n\r\n1.\tAdd a reference to the Microsoft.Intune.MAM.Remapper.Tasks nuget package version 0.1.0.0 or greater.\r\n\r\n2.\tAdd the following line to your Android csproj: `\u003cImport Project=\"$(NugetPack)\\\\Microsoft.Intune.MAM.Remapper.Tasks.0.1.X.X\\\\build\\\\MonoAndroid10\\\\Microsoft.Intune.MAM.Remapper.targets\" /\u003e`\r\n\r\n3.\tSet the build action of the added remapping-config.json file to RemappingConfigFile. The included remapping-config.json only works with Xamarin.Forms. For other UI frameworks, refer to the Readme included with the Remapper nuget package.\r\n\r\nYou have completed the basic steps of building the component into your app. Now you can follow the steps included in the Xamarin Android sample app. We have provided two samples, one for Xamarin.Forms and another for Android.\r\n","Hash":"4ef049ad636d94baef85ad94fa90a219","TargetPlatforms":["ios","ios-unified","android"],"TrialHash":null}